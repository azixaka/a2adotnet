using System.Text.Json.Serialization;

namespace A2Adotnet.Common.Models;

/// <summary>
/// Represents a Task, the central unit of work in A2A communication.
/// </summary>
public record Task
{
    /// <summary>
    /// Unique identifier for the task, typically generated by the client.
    /// </summary>
    [JsonPropertyName("id")]
    public required string Id { get; init; }

    /// <summary>
    /// Optional client-generated identifier to group related tasks.
    /// </summary>
    [JsonPropertyName("sessionId")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SessionId { get; init; }

    /// <summary>
    /// The current status of the task.
    /// </summary>
    [JsonPropertyName("status")]
    public required TaskStatus Status { get; init; }

    /// <summary>
    /// Optional collection of artifacts generated by the agent for this task.
    /// </summary>
    [JsonPropertyName("artifacts")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public List<Artifact>? Artifacts { get; init; }

    /// <summary>
    /// Optional history of messages exchanged for this task (if requested by client).
    /// Populated by the server based on the `historyLength` parameter in requests.
    /// </summary>
    [JsonPropertyName("history")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public List<Message>? History { get; init; } // Note: Server populates this, not directly set by client

    /// <summary>
    /// Optional task-specific metadata.
    /// </summary>
    [JsonPropertyName("metadata")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Dictionary<string, object>? Metadata { get; init; }
}