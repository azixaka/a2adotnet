using System.Text.Json.Serialization;

namespace A2Adotnet.Common.Models;

/// <summary>
/// Represents an output generated by an agent during a Task.
/// </summary>
public record Artifact
{
    /// <summary>
    /// Optional name for the artifact.
    /// </summary>
    [JsonPropertyName("name")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; init; }

    /// <summary>
    /// Optional description of the artifact.
    /// </summary>
    [JsonPropertyName("description")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; init; }

    /// <summary>
    /// The content parts of the artifact.
    /// </summary>
    [JsonPropertyName("parts")]
    public required List<Part> Parts { get; init; }

    /// <summary>
    /// Optional order index, useful for streaming updates. Defaults to 0.
    /// </summary>
    [JsonPropertyName("index")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
    public int Index { get; init; } = 0;

    /// <summary>
    /// For streaming, indicates if content should append to an artifact with the same index.
    /// </summary>
    [JsonPropertyName("append")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Append { get; init; }

    /// <summary>
    /// For streaming, indicates if this is the final chunk for this artifact index.
    /// </summary>
    [JsonPropertyName("lastChunk")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LastChunk { get; init; }

    /// <summary>
    /// Optional artifact-specific metadata.
    /// </summary>
    [JsonPropertyName("metadata")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Dictionary<string, object>? Metadata { get; init; }

     // Constructor for convenience
    public Artifact(List<Part> parts, string? name = null, string? description = null, int index = 0, bool? append = null, bool? lastChunk = null, Dictionary<string, object>? metadata = null)
    {
        ArgumentNullException.ThrowIfNull(parts);
        if (parts.Count == 0)
        {
             throw new ArgumentException("Parts list cannot be empty.", nameof(parts));
        }

        Parts = parts;
        Name = name;
        Description = description;
        Index = index;
        Append = append;
        LastChunk = lastChunk;
        Metadata = metadata;
    }
}